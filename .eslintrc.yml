env:
  browser: true
  es6: true
  node: true
  worker: true
  serviceworker: true

extends:
  "eslint:recommended"

parserOptions:
  ecmaVersion: 6
  sourceType: module

rules:
  #################################################################
  # Basic Config
  #################################################################

  indent:
    - error
    - 2
    - SwitchCase: 1
  linebreak-style:
    - error
    - unix
  quotes:
    - error
    - double
    - avoid-escape

  # Keeping semicolons only for the "return" edge case seems a little to historic for my taste
  semi:
    - error
    - never

  no-extra-parens:
    - off



  #################################################################
  # Best Practices
  #################################################################

  array-callback-return:
    - error
  block-scoped-var:
    - off

  # Keep this down. The default of 20 is far to high in my opinion.
  complexity:
    - error
    - 5
  consistent-return:
    - error

  # New for me: allow curly-free one liners. This might help with my tendency to write
  # more compact braces in Altman style which does not actually worked well together.
  curly:
    - warn
    - multi
  dot-location:
    - error
    - object
  dot-notation:
    - error
    - allowKeywords: false

  # Smart option allows simple equal for null-comparison which is good
  eqeqeq:
    - error
    - smart
  no-alert:
    - error

  # Was mainly relevant while people extended Object.prototype.xxx
  guard-for-in:
    - off

  # Match ES5 strict
  no-caller:
    - error

  # Hard to read code must be forbidden
  no-div-regex:
    - error

  # Makes codes easier to read
  no-else-return:
    - error

  no-empty-function:
    - error
  no-empty-pattern:
    - error

  # This is just stupid
  no-eq-null:
    - off

  no-eval:
    - error
  no-extend-native:
    - error
  no-fallthrough:
    - error
  no-floating-decimal:
    - error

  # I like some of these, but numbers are to awkward for me.
  no-implicit-coercion:
    - error
    - boolean: true
      string: true
      number: false

  # Does not make sense with ES6 modules
  no-implicit-globals:
    - off

  no-implied-eval:
    - error
  no-invalid-this:
    - error
  no-iterator:
    - error
  no-labels:
    - error
  no-lone-blocks:
    - error
  no-loop-func:
    - error

  # Good style
  no-magic-numbers:
    - error
    - ignoreArrayIndexes: true
      ignore: [ 0, 1, 2, 10 ]

  # Useless formatting with high maintenance
  no-multi-spaces:
    - error

  no-multi-str:
    - error
  no-native-reassign:
    - error
  no-new-func:
    - error
  no-new-wrappers:
    - error
  no-octal:
    - error
  no-octal-escape:
    - error

  # Prevent side effects...
  no-param-reassign:
    - error

  # For maintainability of NodeJS code
  no-process-env:
    - error

  # Deprecated feature
  no-proto:
    - error

  # Disabled. Therefor they are variables, right?
  no-redeclare:
    - off

  # Readability wins
  no-return-assign:
    - error

  no-script-url:
    - error
  no-self-assign:
    - error
  no-self-compare:
    - error

  # Omit magic syntax... Readability for all wins
  no-sequences:
    - error

  # Good idea to keep some more error info:
  # "The fundamental benefit of Error objects is that they automatically keep track of where they were built and originated."
  no-throw-literal:
    - error

  no-unmodified-loop-condition:
    - error
  no-unused-expressions:
    - error
  no-useless-call:
    - error
  no-useless-concat:
    - error
  no-void:
    - error
  no-with:
    - error

  # Mainly for securing code compatibility
  radix:
    - error
    - always

  # Does not improve maintainability in my opinion... instead makes
  # unused variables harder to track over time
  vars-on-top:
    - off

  # Prefer inside for readability
  wrap-iife:
    - error
    - inside

  # Actually interesting that this ugliness should be even something to consider
  yoda:
    - error
    - never


  #################################################################
  # Other
  #################################################################

  # Enforce strict mode globally which also happens during bundling
  strict:
    - error
    - global

  no-catch-shadow:
    - error

  # For better maintainability
  no-shadow:
    - error

  # Cleaner code
  no-shadow-restricted-names:
    - error

  # Stupid idea which needs to be prevented
  no-undef-init:
    - error

  # I sometimes like using it to differentiate between null and undefined
  no-undefined:
    - off

  no-unused-vars:
    - error
  no-use-before-define:
    - error



  #################################################################
  # Stylistic
  #################################################################

  array-bracket-spacing:
    - error
    - always

  block-spacing:
    - error
    - always

  # Keeping starting and ending brace symbol on one visible column
  brace-style:
    - error
    - allman
    - allowSingleLine: true

  camelcase:
    - error

  comma-spacing:
    - error
    - before: false
      after: true

  comma-style:
    - error
    - last

  computed-property-spacing:
    - error
    - never

  consistent-this:
    - error
    - self

  eol-last:
    - error

  # Useful for debugging in older browsers, but a lot of work to manually add everywhere
  func-names:
    - off

  # Prefering declaration
  func-style:
    - error
    - declaration

  id-length:
    - error
    - min: 3
      max: 20
      exceptions: ["i", "j", "l"]

  key-spacing:
    - error
    - beforeColon: false
      afterColon: true
      mode: strict

  keyword-spacing:
    - error

  lines-around-comment:
    - error
    - beforeBlockComment: true
      afterBlockComment: false
      beforeLineComment: true
      afterLineComment: false
      allowBlockStart: true
      allowBlockEnd: false
      allowObjectStart: true
      allowObjectEnd: false
      allowArrayStart: true
      allowArrayEnd: false

  max-depth:
    - error
    - maximum: 3

  max-len:
    - error
    - code: 140
      comments: 160
      ignoreUrls: true
      tabWidth: 2

  max-nested-callbacks:
    - error
    - 2

  max-params:
    - error
    - 3

  max-statements:
    - error
    - 10
    - ignoreTopLevelFunctions: true

  new-cap:
    - error

  new-parens:
    - error

  # It good to have newlines when declaring a block of variables, but not for just one
  # where we directly have some actionable stuff afterwards.
  newline-after-var:
    - off

  # Increase readability
  newline-before-return:
    - error
  newline-per-chained-call:
    - error

  no-array-constructor:
    - error

  # Generally prevents errors + rule can be disabled locally when required
  no-bitwise:
    - error

  # Don't see why this is regarded as problematic
  no-continue:
    - off

  # Leads to complexer to overlook code
  no-inline-comments:
    - error

  # Might be used to improve code for human logic
  no-lonely-if:
    - off

  no-multiple-empty-lines:
    - error
    - max: 4
      maxEOF: 1
      maxBOF: 0

  # Can help, but also can make code more complex/unnaturally structured
  no-negated-condition:
    - off

  no-nested-ternary:
    - error

  no-new-object:
    - error

  # Seems to be a new trend to omit this e.g. in Swift and other modern languages
  # But is pretty convenient in classic for-loops... therefor we allow it there
  no-plusplus:
    - warn
    - allowForLoopAfterthoughts: true

  no-restricted-syntax:
    - error
    - WithStatement
    - DebuggerStatement
    - LabeledStatement
    - YieldExpression

  no-spaced-func:
    - error

  no-ternary:
    - off

  # Lead to harder to diff changesets
  no-trailing-spaces:
    - error

  no-underscore-dangle:
    - off

  # Getting people to senior level...
  no-unneeded-ternary:
    - error

  no-whitespace-before-property:
    - error

  object-curly-spacing:
    - error
    - always

  one-var:
    - error
    - initialized: never

  one-var-declaration-per-line:
    - error
    - initializations

  operator-assignment:
    - off

  operator-linebreak:
    - error
    - after

  # Not needed with Alman style. Interestingly deals with the same issue in a different way.
  padded-blocks:
    - error
    - never

  # That's a neat little setting for keeping code readable
  quote-props:
    - error
    - consistent-as-needed

  semi-spacing:
    - error
    - after: true
      before: false

  # Variables and Imports should be sorted in semantic groups not by name
  sort-imports:
    - off
  sort-vars:
    - off

  # Keeping things readable
  space-before-blocks:
    - error
    - always

  # Parens belong to the function... a spacing could break easy grasping of the code
  space-before-function-paren:
    - error
    - never

  space-in-parens:
    - error
    - never

  space-infix-ops:
    - error

  space-unary-ops:
    - error
    - words: true
      nonwords: false

  spaced-comment:
    - error
    - always

  # I like the improved readability when using parens
  wrap-regex:
    - error



  #################################################################
  # ES6+
  #################################################################

  # Call me old fashioned
  arrow-body-style:
    - error
    - always
  arrow-parens:
    - error
    - always

  arrow-spacing:
    - error

  constructor-super:
    - error

  # The star is no operator but a modifier of the function
  generator-star-spacing:
    - error
    - before

  no-class-assign:
    - error

  no-const-assign:
    - error

  no-dupe-class-members:
    - error

  # Trying to start new code the modern way - at least for what it makes sense
  prefer-arrow-callback:
    - warn
  prefer-rest-params:
    - warn
  prefer-spread:
    - warn
  prefer-template:
    - warn
